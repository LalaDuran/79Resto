package Vistas;

import AccesoADatos.*;
import Entidades.*;
import java.awt.Color;
import javax.swing.JComboBox;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author morena
 */
public class ListadoMesas extends javax.swing.JInternalFrame {

    //Cargamos el modelo de tabla
    private final DefaultTableModel modelo = new DefaultTableModel() {
        //Hacemos la tabla no-editable en todas sus celdas
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };

    Color naranja = new Color(255, 84, 25);
    public ListadoMesas() {
        initComponents();
        jPanel1.setBackground(Color.WHITE);
        
        
        panelTitle.setBackground(naranja);
        

        //Carga la capacidad de las mesas al jComboBox
        cargarCapacidad();

        //Carga la estructura de la tabla
        armarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTablaMesas = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jcbCapacidad = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jcbOpciones = new javax.swing.JComboBox<>();
        panelTitle = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(600, 500));

        jPanel1.setPreferredSize(new java.awt.Dimension(600, 500));

        jtTablaMesas.setFont(new java.awt.Font("Yu Gothic Medium", 0, 14)); // NOI18N
        jtTablaMesas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtTablaMesas.getTableHeader().setResizingAllowed(false);
        jtTablaMesas.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jtTablaMesas);

        jLabel2.setFont(new java.awt.Font("Yu Gothic Medium", 0, 14)); // NOI18N
        jLabel2.setText("Capacidad de: ");

        jcbCapacidad.setFont(new java.awt.Font("Yu Gothic Medium", 0, 14)); // NOI18N
        jcbCapacidad.setBorder(null);
        jcbCapacidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbCapacidadActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Yu Gothic Medium", 0, 14)); // NOI18N
        jLabel3.setText("personas");

        jcbOpciones.setFont(new java.awt.Font("Yu Gothic Medium", 0, 14)); // NOI18N
        jcbOpciones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todas", "Habilitadas", "Deshabilitadas", "Ocupadas", "Desocupadas" }));
        jcbOpciones.setBorder(null);
        jcbOpciones.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbOpcionesItemStateChanged(evt);
            }
        });

        panelTitle.setPreferredSize(new java.awt.Dimension(469, 92));

        Title.setFont(new java.awt.Font("Yu Gothic Medium", 1, 24)); // NOI18N
        Title.setText("LISTADO DE MESAS");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/closebtn.png"))); // NOI18N
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelTitleLayout = new javax.swing.GroupLayout(panelTitle);
        panelTitle.setLayout(panelTitleLayout);
        panelTitleLayout.setHorizontalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitleLayout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );
        panelTitleLayout.setVerticalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitleLayout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panelTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jcbOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jcbCapacidad, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(41, 41, 41))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(79, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(panelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jcbCapacidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(78, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcbCapacidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbCapacidadActionPerformed
        //Instanciamos mesa y mesaData para usar luego
        MesaData mesaData = new MesaData();
        Mesa m = new Mesa();

        //Creamos una variable y le asignamos la capacidad seleccionada en la vista
        int capacidad = (int) jcbCapacidad.getSelectedItem();

        //Creamos una variable y le asignamos el estado seleccionada en la vista
        String opcion = (String) jcbOpciones.getSelectedItem();

        //Borramos las filas evitando repeticiones
        borrarFilas();

        if (opcion.equals("Todas")) {
            jcbCapacidad.setEnabled(false);
            for (Mesa aux : mesaData.listarMesa()) {
                modelo.addRow(new Object[]{aux.getIdMesa(), aux.getCapacidad(), aux.getNumero()});
            }
        } else if (opcion.equals("Habilitadas")) {
            jcbCapacidad.setEnabled(true);
            for (Mesa aux : mesaData.listarMesa()) {
                if (aux.getCapacidad() == capacidad && aux.isEstado() == true) {
                    modelo.addRow(new Object[]{aux.getIdMesa(), aux.getCapacidad(), aux.getNumero()});
                }
            }
        } else if (opcion.equals("Deshabilitadas")) {
            jcbCapacidad.setEnabled(true);
            for (Mesa aux : mesaData.listarMesa()) {
                if (aux.getCapacidad() == capacidad && aux.isEstado() == false) {
                    modelo.addRow(new Object[]{aux.getIdMesa(), aux.getCapacidad(), aux.getNumero()});
                }
            }
        } else if (opcion.equals("Ocupadas")) {
            jcbCapacidad.setEnabled(true);
            for (Mesa aux : mesaData.listarMesa()) {
                if (aux.getCapacidad() == capacidad && aux.isOcupada() == true) {
                    modelo.addRow(new Object[]{aux.getIdMesa(), aux.getCapacidad(), aux.getNumero()});
                }
            }
        }  else if (opcion.equals("Desocupadas")) {
            jcbCapacidad.setEnabled(true);
            for (Mesa aux : mesaData.listarMesa()) {
                if (aux.getCapacidad() == capacidad && aux.isOcupada() == false) {
                    modelo.addRow(new Object[]{aux.getIdMesa(), aux.getCapacidad(), aux.getNumero()});
                }
            }
        }        


    }//GEN-LAST:event_jcbCapacidadActionPerformed

    private void jcbOpcionesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbOpcionesItemStateChanged

         MesaData mesaData = new MesaData();
        Mesa m = new Mesa();

        //Creamos una variable y le asignamos la capacidad seleccionada en la vista
        int capacidad = (int) jcbCapacidad.getSelectedItem();

        //Creamos una variable y le asignamos el estado seleccionada en la vista
        String opcion = (String) jcbOpciones.getSelectedItem();

        //Borramos las filas evitando repeticiones
        borrarFilas();

        if (opcion.equals("Todas")) {
            jcbCapacidad.setEnabled(false);
            for (Mesa aux : mesaData.listarMesa()) {
                modelo.addRow(new Object[]{aux.getIdMesa(), aux.getCapacidad(), aux.getNumero()});
            }
        } else if (opcion.equals("Habilitadas")) {
            jcbCapacidad.setEnabled(true);
            for (Mesa aux : mesaData.listarMesa()) {
                if (aux.getCapacidad() == capacidad && aux.isEstado() == true) {
                    modelo.addRow(new Object[]{aux.getIdMesa(), aux.getCapacidad(), aux.getNumero()});
                }
            }
        } else if (opcion.equals("Deshabilitadas")) {
            jcbCapacidad.setEnabled(true);
            for (Mesa aux : mesaData.listarMesa()) {
                if (aux.getCapacidad() == capacidad && aux.isEstado() == false) {
                    modelo.addRow(new Object[]{aux.getIdMesa(), aux.getCapacidad(), aux.getNumero()});
                }
            }
        } else if (opcion.equals("Ocupadas")) {
            jcbCapacidad.setEnabled(true);
            for (Mesa aux : mesaData.listarMesa()) {
                if (aux.getCapacidad() == capacidad && aux.isOcupada() == true) {
                    modelo.addRow(new Object[]{aux.getIdMesa(), aux.getCapacidad(), aux.getNumero()});
                }
            }
        }  else if (opcion.equals("Desocupadas")) {
            jcbCapacidad.setEnabled(true);
            for (Mesa aux : mesaData.listarMesa()) {
                if (aux.getCapacidad() == capacidad && aux.isOcupada() == false) {
                    modelo.addRow(new Object[]{aux.getIdMesa(), aux.getCapacidad(), aux.getNumero()});
                }
            }
        } 
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbOpcionesItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Title;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<Integer> jcbCapacidad;
    private javax.swing.JComboBox<String> jcbOpciones;
    private javax.swing.JTable jtTablaMesas;
    private javax.swing.JPanel panelTitle;
    // End of variables declaration//GEN-END:variables

    private void armarTabla() {
        //Agregamos las cabeceras a la tabla
        modelo.addColumn("Id Mesa");
        modelo.addColumn("Capacidad");
        modelo.addColumn("Número");

        
        //Seteamos el modelo a la tabla
        jtTablaMesas.setModel(modelo);

        //Impedimos el reordenamiento de la cabecera
        jtTablaMesas.getTableHeader().setReorderingAllowed(false);

        //para centrar las celdas del encabezado
        DefaultTableCellRenderer header = (DefaultTableCellRenderer) jtTablaMesas.getTableHeader().getDefaultRenderer();
        header.setHorizontalAlignment(SwingConstants.CENTER);

        //para centrar los datos de la primera columna
        DefaultTableCellRenderer tcr0 = new DefaultTableCellRenderer();
        tcr0.setHorizontalAlignment(SwingConstants.CENTER);
        jtTablaMesas.getColumnModel().getColumn(0).setCellRenderer(tcr0);

        //Para centrar los datos de la segunda columna
        tcr0.setHorizontalAlignment(SwingConstants.CENTER);
        jtTablaMesas.getColumnModel().getColumn(1).setCellRenderer(tcr0);

        //Para centrar los datos de la tercera columna
        tcr0.setHorizontalAlignment(SwingConstants.CENTER);
        jtTablaMesas.getColumnModel().getColumn(2).setCellRenderer(tcr0);
    }

    private void cargarCapacidad() {
        //Cargamos las mesas al jComboBox
        MesaData mesaD = new MesaData();

        for (int i = 1; i < 9; i++) {
            jcbCapacidad.addItem(i);
        }

    }

    private void borrarFilas() {
        //Evita la repetición de las filas en la tabla
        while (modelo.getRowCount() > 0) {
            modelo.removeRow(0);
        }
    }

}
