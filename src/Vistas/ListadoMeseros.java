
package Vistas;

import AccesoADatos.*;
import Entidades.*;
import java.awt.Color;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class ListadoMeseros extends javax.swing.JInternalFrame {

       //Cargamos el modelo de tabla
    private final DefaultTableModel modelo = new DefaultTableModel() {
        //Hacemos la tabla no-editable en todas sus celdas
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };
    
    public ListadoMeseros() {
        initComponents();
        
        //Carga la estructura de la tabla
        armarTabla();
        jPanel1.setBackground(Color.WHITE);
        jPanel2.setBackground(ABMPedidos.naranja);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jbSalir = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jtfBusquedaApellido = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtfBusquedaDNI = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jcbEstado = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTablaMeseros = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setPreferredSize(new java.awt.Dimension(600, 500));

        jLabel1.setFont(new java.awt.Font("Yu Gothic Medium", 1, 24)); // NOI18N
        jLabel1.setText("LISTADO DE MESEROS");

        jbSalir.setFont(new java.awt.Font("Yu Gothic Medium", 0, 14)); // NOI18N
        jbSalir.setText("X");
        jbSalir.setContentAreaFilled(false);
        jbSalir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbSalir)
                .addGap(113, 113, 113)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbSalir)
                .addContainerGap(47, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(24, 24, 24))
        );

        jLabel2.setFont(new java.awt.Font("Yu Gothic Medium", 0, 14)); // NOI18N
        jLabel2.setText("Busqueda por Apellido");

        jtfBusquedaApellido.setFont(new java.awt.Font("Yu Gothic Medium", 0, 14)); // NOI18N
        jtfBusquedaApellido.setBorder(null);
        jtfBusquedaApellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfBusquedaApellidoKeyReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Yu Gothic Medium", 0, 14)); // NOI18N
        jLabel3.setText("Busqueda por DNI");

        jtfBusquedaDNI.setFont(new java.awt.Font("Yu Gothic Medium", 0, 14)); // NOI18N
        jtfBusquedaDNI.setBorder(null);
        jtfBusquedaDNI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfBusquedaDNIKeyReleased(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Yu Gothic Medium", 0, 14)); // NOI18N
        jLabel4.setText("Estado:");

        jcbEstado.setFont(new java.awt.Font("Yu Gothic Medium", 0, 14)); // NOI18N
        jcbEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Activos", "No Activos" }));
        jcbEstado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbEstadoItemStateChanged(evt);
            }
        });

        jtTablaMeseros.setFont(new java.awt.Font("Yu Gothic Medium", 0, 12)); // NOI18N
        jtTablaMeseros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtTablaMeseros);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtfBusquedaApellido, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                    .addComponent(jtfBusquedaDNI, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2))
                .addGap(101, 101, 101))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(199, 199, 199)
                        .addComponent(jLabel4)
                        .addGap(51, 51, 51)
                        .addComponent(jcbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfBusquedaApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtfBusquedaDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 53, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
         //Deselecciona, invisibiliza y cierra la ventana
        this.dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jtfBusquedaApellidoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfBusquedaApellidoKeyReleased
        //Instanciamos meseroData para usar su método listarMesero
        MeseroData meseroD = new MeseroData();
        
        //Instanciamos una variable que refleje lo seleccionado en el comboBox
        String estadoElegido = (String) jcbEstado.getSelectedItem();
        
        if (estadoElegido.equals("Todos")) {
            borrarFilas();
            for (Mesero aux : meseroD.listarMesero()) {
                if (aux.getApellido().toLowerCase().startsWith(jtfBusquedaApellido.getText().toLowerCase())) {
                    modelo.addRow(new Object[]{aux.getIdMesero(),aux.getApellido(),aux.getNombre(),aux.getDni()});
                }
            }
        } else if (estadoElegido.equals("Activos")) {
            borrarFilas();
            for (Mesero aux : meseroD.listarMesero()) {
                if (aux.getApellido().toLowerCase().startsWith(jtfBusquedaApellido.getText().toLowerCase()) && aux.isEstado() == true) {
                    modelo.addRow(new Object[]{aux.getIdMesero(), aux.getApellido(), aux.getNombre(), aux.getDni()});
                }
            }
        } else if(estadoElegido.equals("No Activos")) {
            borrarFilas();
            for (Mesero aux : meseroD.listarMesero()) {
                if (aux.getApellido().toLowerCase().startsWith(jtfBusquedaApellido.getText().toLowerCase()) && aux.isEstado() == false) {
                    modelo.addRow(new Object[]{aux.getIdMesero(), aux.getApellido(), aux.getNombre(), aux.getDni()});
                }
            }
        }
    }//GEN-LAST:event_jtfBusquedaApellidoKeyReleased

    private void jtfBusquedaDNIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfBusquedaDNIKeyReleased
        //Instanciamos meseroData para usar su método listarMesero
        MeseroData meseroD = new MeseroData();
        
        //Instanciamos una variable que refleje lo seleccionado en el comboBox
        String estadoElegido = (String) jcbEstado.getSelectedItem();
        
        if (estadoElegido.equals("Todos")) {
            borrarFilas();
            for (Mesero aux : meseroD.listarMesero()) {
                if (Integer.toString(aux.getDni()).startsWith(jtfBusquedaDNI.getText())) {
                    modelo.addRow(new Object[]{aux.getIdMesero(),aux.getApellido(),aux.getNombre(),aux.getDni()});
                }
            }
        } else if (estadoElegido.equals("Activos")) {
            borrarFilas();
            for (Mesero aux : meseroD.listarMesero()) {
                if (Integer.toString(aux.getDni()).startsWith(jtfBusquedaDNI.getText()) && aux.isEstado() == true) {
                    modelo.addRow(new Object[]{aux.getIdMesero(), aux.getApellido(), aux.getNombre(), aux.getDni()});
                }
            }
        } else {
            borrarFilas();
            for (Mesero aux : meseroD.listarMesero()) {
                if (Integer.toString(aux.getDni()).startsWith(jtfBusquedaDNI.getText()) && aux.isEstado() == false) {
                    modelo.addRow(new Object[]{aux.getIdMesero(), aux.getApellido(), aux.getNombre(), aux.getDni()});
                }
            }
        }
    }//GEN-LAST:event_jtfBusquedaDNIKeyReleased

    private void jcbEstadoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbEstadoItemStateChanged
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbEstadoItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<String> jcbEstado;
    private javax.swing.JTable jtTablaMeseros;
    private javax.swing.JTextField jtfBusquedaApellido;
    private javax.swing.JTextField jtfBusquedaDNI;
    // End of variables declaration//GEN-END:variables
    
    private void armarTabla() {
        //Agregamos las cabeceras a la tabla
        modelo.addColumn("Id Mesero");
        modelo.addColumn("Apellido");
        modelo.addColumn("Nombres");
        modelo.addColumn("DNI");

        //Seteamos el modelo a la tabla
        jtTablaMeseros.setModel(modelo);

        //Impedimos el reordenamiento de la cabecera
        jtTablaMeseros.getTableHeader().setReorderingAllowed(false);

        //para centrar las celdas del encabezado
        DefaultTableCellRenderer header = (DefaultTableCellRenderer) jtTablaMeseros.getTableHeader().getDefaultRenderer();
        header.setHorizontalAlignment(SwingConstants.CENTER);

        //para centrar los datos de la primera columna
        DefaultTableCellRenderer tcr0 = new DefaultTableCellRenderer();
        tcr0.setHorizontalAlignment(SwingConstants.CENTER);
        jtTablaMeseros.getColumnModel().getColumn(0).setCellRenderer(tcr0);

        //Para centrar los datos de la cuarta columna
        tcr0.setHorizontalAlignment(SwingConstants.CENTER);
        jtTablaMeseros.getColumnModel().getColumn(3).setCellRenderer(tcr0);

    }

    private void borrarFilas() {
        //Evita la repetición de las filas en la tabla
        while (modelo.getRowCount() > 0) {
            modelo.removeRow(0);
        }
    }

}
